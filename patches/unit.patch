From 6f8071b7c506b3cbba5292aa26c84aeb8baf3044 Mon Sep 17 00:00:00 2001
From: Craig <hippouss@example.com>
Date: Sun, 17 Jul 2011 16:49:20 +0200
Subject: [PATCH] Unit stuff

---
 src/game/Unit.cpp                |   96 +++++++++++++++++++++++++++++++++++--
 src/game/Unit.h                  |   10 +++-
 src/game/UnitAuraProcHandler.cpp |   32 ++++++++-----
 3 files changed, 116 insertions(+), 22 deletions(-)

diff --git a/src/game/Unit.cpp b/src/game/Unit.cpp
index c4c002c..2d63a93 100644
--- a/src/game/Unit.cpp
+++ b/src/game/Unit.cpp
@@ -490,11 +490,30 @@ void Unit::RemoveSpellbyDamageTaken(AuraType auraType, uint32 damage)
     if(!HasAuraType(auraType))
         return;
 
+    // Spells with SPELL_ATTR_UNAFFECTED_BY_INVULNERABILITY should not be removed by dmg
+    bool found = false;
+    AuraList const& mModRoot = GetAurasByType(auraType);
+    for(AuraList::const_iterator itr = mModRoot.begin(); itr != mModRoot.end(); ++itr)
+    {
+        if ((*itr)->GetSpellProto()->Attributes & SPELL_ATTR_UNAFFECTED_BY_INVULNERABILITY)
+        {
+            found = true;
+            break;
+        }
+    }
+
+    if (found)
+        return;
+
+    uint32 dmg_done = damage + GetDamageForAuraType(auraType);
+
     // The chance to dispel an aura depends on the damage taken with respect to the casters level.
     uint32 max_dmg = getLevel() > 8 ? 25 * getLevel() - 150 : 50;
-    float chance = float(damage) / max_dmg * 100.0f;
+    float chance = float(dmg_done) / max_dmg * 100.0f;
     if (roll_chance_f(chance))
         RemoveSpellsCausingAura(auraType);
+    else
+        SetDamageForAuraType(auraType, true, damage);
 }
 
 void Unit::DealDamageMods(Unit *pVictim, uint32 &damage, uint32* absorb)
@@ -1382,9 +1401,17 @@ void Unit::CalculateMeleeDamage(Unit *pVictim, uint32 damage, CalcDamageInfo *da
     // Add melee damage bonus
     damage = MeleeDamageBonusDone(damageInfo->target, damage, damageInfo->attackType);
     damage = damageInfo->target->MeleeDamageBonusTaken(this, damage, damageInfo->attackType);
-    // Calculate armor reduction
-    damageInfo->damage = CalcArmorReducedDamage(damageInfo->target, damage);
-    damageInfo->cleanDamage += damage - damageInfo->damage;
+    // Calculate armor reduction for physical attacks
+    if (damageInfo->damageSchoolMask == SPELL_SCHOOL_MASK_NORMAL)
+    {
+        damageInfo->damage = CalcArmorReducedDamage(damageInfo->target, damage);
+        damageInfo->cleanDamage += damage - damageInfo->damage;
+    }
+        else
+    {
+        damageInfo->damage = damage;
+        damageInfo->cleanDamage += damage;
+    }
 
     damageInfo->hitOutCome = RollMeleeOutcomeAgainst(damageInfo->target, damageInfo->attackType);
 
@@ -1395,6 +1422,16 @@ void Unit::CalculateMeleeDamage(Unit *pVictim, uint32 damage, CalcDamageInfo *da
         if (damageInfo->hitOutCome == MELEE_HIT_DODGE) damageInfo->hitOutCome = MELEE_HIT_MISS;
     }
 
+    // Disable parry, dodge, crushing, block and miss for non-physical attacks
+    if (damageInfo->damageSchoolMask != SPELL_SCHOOL_MASK_NORMAL)
+    {
+        if (damageInfo->hitOutCome == MELEE_HIT_PARRY) damageInfo->hitOutCome = MELEE_HIT_NORMAL;
+        if (damageInfo->hitOutCome == MELEE_HIT_DODGE) damageInfo->hitOutCome = MELEE_HIT_NORMAL;
+        if (damageInfo->hitOutCome == MELEE_HIT_CRUSHING) damageInfo->hitOutCome = MELEE_HIT_NORMAL;
+        if (damageInfo->hitOutCome == MELEE_HIT_BLOCK) damageInfo->hitOutCome = MELEE_HIT_NORMAL;
+        if (damageInfo->hitOutCome == MELEE_HIT_MISS) damageInfo->hitOutCome = MELEE_HIT_NORMAL;
+    }
+
     switch(damageInfo->hitOutCome)
     {
         case MELEE_HIT_EVADE:
@@ -1569,6 +1606,13 @@ void Unit::DealMeleeDamage(CalcDamageInfo *damageInfo, bool durabilityLoss)
     if (!pVictim->isAlive() || pVictim->IsTaxiFlying() || (pVictim->GetTypeId() == TYPEID_UNIT && ((Creature*)pVictim)->IsInEvadeMode()))
         return;
 
+    // Do not deal damage to Onyxia, when she is Flying during phase 2
+    if (pVictim->GetEntry() == 10184 && ((Creature*)pVictim)->HasSplineFlag(SPLINEFLAG_FLYING) && damageInfo->damageSchoolMask == SPELL_SCHOOL_MASK_NORMAL)
+    {
+        //error_log("Unit::DealMeleeDamage(): %s %s (guid %d) will do not deal damage to Onyxia, because she is flying.", this->GetTypeId() == TYPEID_PLAYER ? "Player" : "Creature", this->GetName(), this->GetObjectGuid());
+        return;
+    }
+
     // Hmmmm dont like this emotes client must by self do all animations
     if (damageInfo->HitInfo&HITINFO_CRITICALHIT)
         pVictim->HandleEmoteCommand(EMOTE_ONESHOT_WOUNDCRITICAL);
@@ -2164,7 +2208,7 @@ MeleeHitOutcome Unit::RollMeleeOutcomeAgainst (const Unit *pVictim, WeaponAttack
         int32 maxskill = attackerMaxSkillValueForLevel;
         skill = (skill > maxskill) ? maxskill : skill;
 
-        tmp = (10 + (victimDefenseSkill - skill)) * 100;
+        tmp = (10 + 2*(victimDefenseSkill - skill)) * 100;
         tmp = tmp > 4000 ? 4000 : tmp;
         if (roll < (sum += tmp))
         {
@@ -3331,7 +3375,12 @@ bool Unit::AddSpellAuraHolder(SpellAuraHolder *holder)
         for (SpellAuraHolderMap::iterator iter = spair.first; iter != spair.second; ++iter)
         {
             SpellAuraHolder *foundHolder = iter->second;
-            if (foundHolder->GetCasterGuid() == holder->GetCasterGuid())
+            if (foundHolder->GetCasterGuid() == holder->GetCasterGuid() ||
+                aurSpellInfo->Id == 22959 ||                                    // Improved Scorch
+                aurSpellInfo->Id == 15258 ||                                    // Shadow Weaving
+                aurSpellInfo->Id == 12579 ||                                    // Winter's Chill
+                (aurSpellInfo->SpellFamilyName == SPELLFAMILY_WARRIOR &&
+                aurSpellInfo->SpellFamilyFlags & UI64LIT(0x00000004000)))       // Sunder Armor
             {
                 // Aura can stack on self -> Stack it;
                 if (aurSpellInfo->StackAmount)
@@ -3374,6 +3423,7 @@ bool Unit::AddSpellAuraHolder(SpellAuraHolder *holder)
                     case SPELL_AURA_PERIODIC_MANA_LEECH:
                     case SPELL_AURA_OBS_MOD_MANA:
                     case SPELL_AURA_POWER_BURN_MANA:
+                    case SPELL_AURA_PERIODIC_HEALTH_FUNNEL:
                         break;
                     case SPELL_AURA_PERIODIC_ENERGIZE:      // all or self or clear non-stackable
                     default:                                // not allow
@@ -5186,6 +5236,9 @@ Unit* Unit::SelectMagnetTarget(Unit *victim, Spell* spell, SpellEffectIndex eff)
     // Magic case
     if (spell && (spell->m_spellInfo->DmgClass == SPELL_DAMAGE_CLASS_NONE || spell->m_spellInfo->DmgClass == SPELL_DAMAGE_CLASS_MAGIC))
     {
+        if (spell->m_spellInfo->Attributes & SPELL_ATTR_ABILITY || spell->m_spellInfo->AttributesEx & SPELL_ATTR_EX_CANT_BE_REDIRECTED)
+            return victim;
+
         Unit::AuraList const& magnetAuras = victim->GetAurasByType(SPELL_AURA_SPELL_MAGNET);
         for(Unit::AuraList::const_iterator itr = magnetAuras.begin(); itr != magnetAuras.end(); ++itr)
         {
@@ -5446,6 +5499,9 @@ int32 Unit::SpellBaseDamageBonusTaken(SpellSchoolMask schoolMask)
 
 bool Unit::IsSpellCrit(Unit *pVictim, SpellEntry const *spellProto, SpellSchoolMask schoolMask, WeaponAttackType attackType)
 {
+    if (GetObjectGuid().IsCreature())
+        return false;
+
     // not critting spell
     if((spellProto->AttributesEx2 & SPELL_ATTR_EX2_CANT_CRIT))
         return false;
@@ -8304,6 +8360,8 @@ void Unit::SetFeared(bool apply, ObjectGuid casterGuid, uint32 spellID, uint32 t
         }
     }
 
+    SetDamageForAuraType(SPELL_AURA_MOD_FEAR, apply);
+
     if (GetTypeId() == TYPEID_PLAYER)
         ((Player*)this)->SetClientControl(this, !apply);
 }
@@ -8963,6 +9021,32 @@ bool Unit::CheckAndIncreaseCastCounter()
     return true;
 }
 
+uint32 Unit::GetDamageForAuraType(AuraType auraType)
+{
+    DamageForAuraTypeMap::iterator itr = m_DamageForAuraTypes.find(auraType);
+    if (itr != m_DamageForAuraTypes.end())
+        return itr->second;
+
+    return NULL;
+}
+
+void Unit::SetDamageForAuraType(AuraType auraType, bool apply, uint32 damage)
+{
+    if (apply)
+    {
+        DamageForAuraTypeMap::iterator itr = m_DamageForAuraTypes.find(auraType);
+        if (itr == m_DamageForAuraTypes.end())
+        {
+            m_DamageForAuraTypes[auraType] = damage;
+            return;
+        }
+
+        itr->second += damage;
+    }
+    else
+        m_DamageForAuraTypes.erase(auraType);
+}
+
 SpellAuraHolder* Unit::GetSpellAuraHolder (uint32 spellid) const
 {
     SpellAuraHolderMap::const_iterator itr = m_spellAuraHolders.find(spellid);
diff --git a/src/game/Unit.h b/src/game/Unit.h
index 6326262..ca1fa28 100644
--- a/src/game/Unit.h
+++ b/src/game/Unit.h
@@ -455,12 +455,11 @@ enum UnitFlags
     UNIT_FLAG_PVP_ATTACKABLE        = 0x00000008,           // allow apply pvp rules to attackable state in addition to faction dependent state, UNIT_FLAG_UNKNOWN1 in pre-bc mangos
     UNIT_FLAG_RENAME                = 0x00000010,           // rename creature
     UNIT_FLAG_RESTING               = 0x00000020,
-    UNIT_FLAG_UNK_6                 = 0x00000040,
+    UNIT_FLAG_MOUNT                 = 0x00000040,
     UNIT_FLAG_OOC_NOT_ATTACKABLE    = 0x00000100,           // (OOC Out Of Combat) Can not be attacked when not in combat. Removed if unit for some reason enter combat (flag probably removed for the attacked and it's party/group only)
     UNIT_FLAG_PASSIVE               = 0x00000200,           // makes you unable to attack everything. Almost identical to our "civilian"-term. Will ignore it's surroundings and not engage in combat unless "called upon" or engaged by another unit.
     UNIT_FLAG_PVP                   = 0x00001000,
     UNIT_FLAG_SILENCED              = 0x00002000,           // silenced, 2.1.1
-    UNIT_FLAG_MOUNT                 = 0x00002000,           // to check, need find proper flag
     UNIT_FLAG_UNK_14                = 0x00004000,
     UNIT_FLAG_UNK_15                = 0x00008000,
     UNIT_FLAG_UNK_16                = 0x00010000,           // removes attackable icon
@@ -483,7 +482,6 @@ enum UnitFlags
     UNIT_FLAG_CONFUSED              = 0x00400000,
     UNIT_FLAG_FLEEING               = 0x00800000,
     UNIT_FLAG_PLAYER_CONTROLLED     = 0x01000000,           // used in spell Eyes of the Beast for pet... let attack by controlled creature
-//[-ZERO]    UNIT_FLAG_MOUNT                 = 0x08000000,
     UNIT_FLAG_UNK_28                = 0x10000000,
     UNIT_FLAG_UNK_29                = 0x20000000,           // used in Feing Death spell
 };
@@ -1692,6 +1690,11 @@ class MANGOS_DLL_SPEC Unit : public WorldObject
         void AddPetAura(PetAura const* petSpell);
         void RemovePetAura(PetAura const* petSpell);
 
+        // Damage handling for auras removed by damage done
+        typedef std::map<AuraType, uint32> DamageForAuraTypeMap;
+        uint32 GetDamageForAuraType(AuraType auraType);
+        void SetDamageForAuraType(AuraType auraType, bool apply, uint32 damage = 0);
+
         // Movement info
         //MovementInfo m_movementInfo; -- BIG TODO backport
 
@@ -1720,6 +1723,7 @@ class MANGOS_DLL_SPEC Unit : public WorldObject
         SpellAuraHolderMap m_spellAuraHolders;
         SpellAuraHolderMap::iterator m_spellAuraHoldersUpdateIterator; // != end() in Unit::m_spellAuraHolders update and point to next element
         AuraList m_deletedAuras;                                       // auras removed while in ApplyModifier and waiting deleted
+        DamageForAuraTypeMap m_DamageForAuraTypes;
         SpellAuraHolderList m_deletedHolders;
 
         SingleCastSpellTargetMap m_singleCastSpellTargets;  // casted by unit single per-caster auras
diff --git a/src/game/UnitAuraProcHandler.cpp b/src/game/UnitAuraProcHandler.cpp
index 642917d..f797465 100644
--- a/src/game/UnitAuraProcHandler.cpp
+++ b/src/game/UnitAuraProcHandler.cpp
@@ -647,17 +647,6 @@ SpellAuraProcResult Unit::HandleDummyAuraProc(Unit *pVictim, uint32 damage, Aura
                 mod->m_amount-=damage;
                 return SPELL_AURA_PROC_OK;
             }
-            switch(dummySpell->Id)
-            {
-                // Nightfall
-                case 18094:
-                case 18095:
-                {
-                    target = this;
-                    triggered_spell_id = 17941;
-                    break;
-                }
-            }
             break;
         }
         case SPELLFAMILY_PRIEST:
@@ -780,6 +769,15 @@ SpellAuraProcResult Unit::HandleDummyAuraProc(Unit *pVictim, uint32 damage, Aura
                     damagePoint = pVictim->SpellDamageBonusTaken(this, dummySpell, damagePoint, SPELL_DIRECT_DAMAGE);
                 }
 
+                // Improved Seal of Righteousness
+                AuraList const& mAddPctModList = GetAurasByType(SPELL_AURA_ADD_PCT_MODIFIER);
+                for(AuraList::const_iterator itr = mAddPctModList.begin(); itr != mAddPctModList.end(); ++itr)
+                {
+                    SpellEntry const* spellInfo = (*itr)->GetSpellProto();
+                    if (spellInfo->SpellFamilyName == SPELLFAMILY_PALADIN && spellInfo->SpellIconID == 25)
+                        damagePoint *= ((*itr)->GetModifier()->m_amount + 100) / 100.0f;
+                }
+
                 CastCustomSpell(pVictim,spellId,&damagePoint,NULL,NULL,true,NULL, triggeredByAura);
                 return SPELL_AURA_PROC_OK;                                // no hidden cooldown
             }
@@ -1170,8 +1168,8 @@ SpellAuraProcResult Unit::HandleProcTriggerSpellAuraProc(Unit *pVictim, uint32 d
         return SPELL_AURA_PROC_FAILED;
     }
 
-    // not allow proc extra attack spell at extra attack
-    if (m_extraAttacks && IsSpellHaveEffect(triggerEntry, SPELL_EFFECT_ADD_EXTRA_ATTACKS))
+    // not allow proc extra attack spell at extra attack except Reckoning (can stack up 4 times)
+    if (m_extraAttacks && IsSpellHaveEffect(triggerEntry, SPELL_EFFECT_ADD_EXTRA_ATTACKS) && trigger_spell_id != 20178)
         return SPELL_AURA_PROC_FAILED;
 
     // Custom basepoints/target for exist spell
@@ -1199,6 +1197,9 @@ SpellAuraProcResult Unit::HandleProcTriggerSpellAuraProc(Unit *pVictim, uint32 d
         case 14157: // Ruthlessness
         {
             // Need add combopoint AFTER finishing move (or they get dropped in finish phase)
+            if (!pVictim || pVictim == this)
+                return SPELL_AURA_PROC_FAILED;
+
             if (Spell* spell = GetCurrentSpell(CURRENT_GENERIC_SPELL))
             {
                 spell->AddTriggeredSpell(trigger_spell_id);
@@ -1301,6 +1302,11 @@ SpellAuraProcResult Unit::HandleOverrideClassScriptAuraProc(Unit *pVictim, uint3
             triggered_spell_id = 24406;
             break;
         }
+        case 4309:                                          // Nightfall
+        {
+            triggered_spell_id = 17941;
+            break;
+        }
         case 4533:                                          // Dreamwalker Raiment 2 pieces bonus
         {
             // Chance 50%
-- 
1.7.4.msysgit.0

