From ff3140db1d892e244f7266c0fcf4bd45cd969e37 Mon Sep 17 00:00:00 2001
From: Craig <hippouss@none.com>
Date: Wed, 14 Sep 2011 16:46:36 +0200
Subject: [PATCH] Spell Specifics, (No)Stack conditions

---
 src/game/SpellMgr.cpp |  117 ++++++++++++++++++++++++++++++++++++++++++++++---
 src/game/SpellMgr.h   |    7 ++-
 2 files changed, 115 insertions(+), 9 deletions(-)

diff --git a/src/game/SpellMgr.cpp b/src/game/SpellMgr.cpp
index 41dac58..ab72dda 100644
--- a/src/game/SpellMgr.cpp
+++ b/src/game/SpellMgr.cpp
@@ -116,7 +116,7 @@ uint32 GetSpellCastTime(SpellEntry const* spellInfo, Spell const* spell)
         if (Player* modOwner = spell->GetCaster()->GetSpellModOwner())
             modOwner->ApplySpellMod(spellInfo->Id, SPELLMOD_CASTING_TIME, castTime, spell);
 
-        if (!(spellInfo->Attributes & (SPELL_ATTR_UNK4|SPELL_ATTR_TRADESPELL)))
+        if (!(spellInfo->Attributes & (SPELL_ATTR_ABILITY|SPELL_ATTR_TRADESPELL)))
             castTime = int32(castTime * spell->GetCaster()->GetFloatValue(UNIT_MOD_CAST_SPEED));
         else
         {
@@ -559,16 +559,13 @@ bool IsSingleFromSpellSpecificPerTarget(SpellSpecific spellSpec1,SpellSpecific s
         case SPELL_ELEMENTAL_SHIELD:
         case SPELL_MAGE_POLYMORPH:
         case SPELL_WELL_FED:
+        case SPELL_ZANZA_ELIXIR:
             return spellSpec1==spellSpec2;
         case SPELL_BATTLE_ELIXIR:
             return spellSpec2==SPELL_BATTLE_ELIXIR
                 || spellSpec2==SPELL_FLASK_ELIXIR;
-        case SPELL_GUARDIAN_ELIXIR:
-            return spellSpec2==SPELL_GUARDIAN_ELIXIR
-                || spellSpec2==SPELL_FLASK_ELIXIR;
         case SPELL_FLASK_ELIXIR:
             return spellSpec2==SPELL_BATTLE_ELIXIR
-                || spellSpec2==SPELL_GUARDIAN_ELIXIR
                 || spellSpec2==SPELL_FLASK_ELIXIR;
         case SPELL_FOOD:
             return spellSpec2==SPELL_FOOD
@@ -641,6 +638,24 @@ bool IsExplicitNegativeTarget(uint32 targetA)
 
 bool IsPositiveEffect(SpellEntry const *spellproto, SpellEffectIndex effIndex)
 {
+    switch(spellproto->Id)
+    {
+        case 1008:                                          // Aplify magic (Rank 1)
+        case 8455:                                          // Aplify magic (Rank 2)
+        case 10169:                                         // Aplify magic (Rank 3)
+        case 10170:                                         // Aplify magic (Rank 4)
+        case 19714:                                         // Deaden Magic
+        case 20553:                                         // Golemagg's Trust
+        case 20619:                                         // Magic Reflection
+        case 21075:                                         // Damage Shield
+            return true;
+        case 23205:                                         // Temptress' Kiss
+        case 28282:                                         // Ashbringer
+            return false;
+        default:
+            break;
+    }
+
     switch(spellproto->Effect[effIndex])
     {
         case SPELL_EFFECT_DUMMY:
@@ -671,6 +686,8 @@ bool IsPositiveEffect(SpellEntry const *spellproto, SpellEffectIndex effIndex)
                     {
                         case 13139:                         // net-o-matic special effect
                         case 23445:                         // evil twin
+                        case 23182:                         // Mark of Frost
+                        case 25040:                         // Mark of Nature
                         case 35679:                         // Protectorate Demolitionist
                         case 38637:                         // Nether Exhaustion (red)
                         case 38638:                         // Nether Exhaustion (green)
@@ -748,6 +765,7 @@ bool IsPositiveEffect(SpellEntry const *spellproto, SpellEffectIndex effIndex)
                     if(spellproto->Id == 24740)             // Wisp Costume
                         return true;
                     return false;
+                case SPELL_AURA_AURAS_VISIBLE:
                 case SPELL_AURA_MOD_ROOT:
                 case SPELL_AURA_MOD_SILENCE:
                 case SPELL_AURA_GHOST:
@@ -1884,6 +1902,40 @@ bool SpellMgr::IsNoStackSpellDueToSpell(uint32 spellId_1, uint32 spellId_2) cons
                         (spellInfo_2->Id == 8326 && spellInfo_1->Id == 20584))
                          return false;
 
+                    // Stoneform (Racial)
+                    if ((spellInfo_1->Id == 20594 && spellInfo_2->Id == 20612) ||
+                        (spellInfo_2->Id == 20594 && spellInfo_1->Id == 20612))
+                         return false;
+
+                    // Blood Siphon
+                    if ((spellInfo_1->Id == 24322 && spellInfo_2->Id == 24324) ||
+                        (spellInfo_2->Id == 24322 && spellInfo_1->Id == 24324))
+                         return false;
+
+                    // Mark of Nature dummies
+                    if ((spellInfo_1->Id == 25040 && spellInfo_2->Id == 25042) ||
+                        (spellInfo_2->Id == 25040 && spellInfo_1->Id == 25042))
+                         return false;
+
+                    if ((spellInfo_1->Id == 25040 && spellInfo_2->Id == 25043) ||
+                        (spellInfo_2->Id == 25040 && spellInfo_1->Id == 25043))
+                         return false;
+
+                    // Mark of Nature and Aura of Nature
+                    if ((spellInfo_1->Id == 25042 && spellInfo_2->Id == 25043) ||
+                        (spellInfo_2->Id == 25042 && spellInfo_1->Id == 25043))
+                         return false;
+
+                    // Mark of Frost dummies
+                    if ((spellInfo_1->Id == 23182 && spellInfo_2->Id == 23183) ||
+                        (spellInfo_2->Id == 23182 && spellInfo_1->Id == 23183))
+                         return false;
+
+                    // Ancestral Healing and Inspiration
+                    if (spellInfo_1->EffectMiscValue[EFFECT_INDEX_0] == 1 && spellInfo_2->EffectMiscValue[EFFECT_INDEX_0] == 1 && (
+                        (spellInfo_1->SpellIconID == 200 && spellInfo_2->SpellIconID == 1463) ||
+                        (spellInfo_2->SpellIconID == 200 && spellInfo_1->SpellIconID == 1463)))
+                         return true;
                     break;
                 }
                 case SPELLFAMILY_MAGE:
@@ -1903,6 +1955,14 @@ bool SpellMgr::IsNoStackSpellDueToSpell(uint32 spellId_1, uint32 spellId_2) cons
 
                     break;
                 }
+                case SPELLFAMILY_PRIEST:
+                {
+                    // Divine Spirit / Prayer of Spirit and Blessed Sunfruit Juice
+                    if (spellInfo_1->Id == 18141 && spellInfo_2->SpellVisual == 193)
+                        return false;
+
+                    break;
+                }
                 case SPELLFAMILY_DRUID:
                 {
                     // Scroll of Stamina and Leader of the Pack (multi-family check)
@@ -1921,6 +1981,9 @@ bool SpellMgr::IsNoStackSpellDueToSpell(uint32 spellId_1, uint32 spellId_2) cons
                     if (spellInfo_1->SpellIconID == 498 && spellInfo_1->SpellVisual == 0 && spellInfo_2->SpellIconID == 498)
                         return false;
 
+                    // Sprint & Improved Sprint
+                    if (spellInfo_1->Id == 30918 && spellInfo_2->SpellFamilyFlags & UI64LIT(0x40))
+                        return false;
                     break;
                 }
                 case SPELLFAMILY_HUNTER:
@@ -2017,6 +2080,18 @@ bool SpellMgr::IsNoStackSpellDueToSpell(uint32 spellId_1, uint32 spellId_2) cons
                 if ((spellInfo_1->SpellIconID == 456 && spellInfo_2->SpellIconID == 2006) ||
                     (spellInfo_2->SpellIconID == 456 && spellInfo_1->SpellIconID == 2006))
                     return false;
+
+                // Berserker Stance and Lord General's Sword
+                if ((spellInfo_1->Id == 2458 && spellInfo_2->Id == 15602) ||
+                    (spellInfo_2->Id == 2458 && spellInfo_1->Id == 15602))
+                    return false;
+            }
+
+            // Sunder Armor and Expose Armor
+            if (spellInfo_2->SpellFamilyName == SPELLFAMILY_ROGUE)
+            {
+                if (spellInfo_1->SpellFamilyFlags & UI64LIT(0x00000004000) && spellInfo_2->SpellFamilyFlags & UI64LIT(0x00000080000))
+                    return true;
             }
 
             // Hamstring -> Improved Hamstring (multi-family check)
@@ -2036,14 +2111,18 @@ bool SpellMgr::IsNoStackSpellDueToSpell(uint32 spellId_1, uint32 spellId_2) cons
             if (spellInfo_2->SpellFamilyName == SPELLFAMILY_PRIEST)
             {
                 //Devouring Plague and Shadow Vulnerability
-                if (((spellInfo_1->SpellFamilyFlags & UI64LIT(0x2000000)) && (spellInfo_2->SpellFamilyFlags & UI64LIT(0x800000000))) ||
-                    ((spellInfo_2->SpellFamilyFlags & UI64LIT(0x2000000)) && (spellInfo_1->SpellFamilyFlags & UI64LIT(0x800000000))))
+                if (((spellInfo_1->SpellFamilyFlags & UI64LIT(0x2000000)) && (spellInfo_2->SpellFamilyFlags & UI64LIT(0x004000000))) ||
+                    ((spellInfo_2->SpellFamilyFlags & UI64LIT(0x2000000)) && (spellInfo_1->SpellFamilyFlags & UI64LIT(0x004000000))))
                     return false;
 
                 //StarShards and Shadow Word: Pain
                 if (((spellInfo_1->SpellFamilyFlags & UI64LIT(0x200000)) && (spellInfo_2->SpellFamilyFlags & UI64LIT(0x8000))) ||
                     ((spellInfo_2->SpellFamilyFlags & UI64LIT(0x200000)) && (spellInfo_1->SpellFamilyFlags & UI64LIT(0x8000))))
                     return false;
+
+                // Divine Spirit / Prayer of Spirit and Blessed Sunfruit Juice
+                if (spellInfo_1->SpellVisual == 193 && spellInfo_2->Id == 18141)
+                    return false;
             }
             break;
         case SPELLFAMILY_DRUID:
@@ -2092,9 +2171,20 @@ bool SpellMgr::IsNoStackSpellDueToSpell(uint32 spellId_1, uint32 spellId_2) cons
                     return false;
             }
 
+            // Sunder Armor and Expose Armor
+            if (spellInfo_2->SpellFamilyName == SPELLFAMILY_WARRIOR)
+            {
+                if (spellInfo_1->SpellFamilyFlags & UI64LIT(0x00000080000) && spellInfo_2->SpellFamilyFlags & UI64LIT(0x00000004000))
+                    return true;
+            }
+
             // Garrote -> Garrote-Silence (multi-family check)
             if (spellInfo_1->SpellIconID == 498 && spellInfo_2->SpellIconID == 498 && spellInfo_2->SpellVisual == 0)
                 return false;
+
+            // Sprint & Improved Sprint
+            if (spellInfo_1->SpellFamilyFlags & UI64LIT(0x40) && spellInfo_1->Id == 30918)
+                return false;
             break;
         case SPELLFAMILY_HUNTER:
             if (spellInfo_2->SpellFamilyName == SPELLFAMILY_HUNTER)
@@ -3758,6 +3848,9 @@ DiminishingGroup GetDiminishingReturnsGroupForSpell(SpellEntry const* spellproto
             // Blind
             else if (spellproto->SpellFamilyFlags & UI64LIT(0x00001000000))
                 return DIMINISHING_BLIND;
+            // Crippling poison
+            else if (spellproto->SpellIconID == 163)
+                return DIMINISHING_LIMITONLY;
             break;
         }
         case SPELLFAMILY_HUNTER:
@@ -3765,6 +3858,9 @@ DiminishingGroup GetDiminishingReturnsGroupForSpell(SpellEntry const* spellproto
             // Freezing trap
             if (spellproto->SpellFamilyFlags & UI64LIT(0x00000000008))
                 return DIMINISHING_FREEZE;
+            // Wyvern Sting
+            else if (spellproto->SpellFamilyFlags & UI64LIT(0x0000100000000000))
+                return DIMINISHING_LIMITONLY;
             break;
         }
         case SPELLFAMILY_WARLOCK:
@@ -3784,6 +3880,13 @@ DiminishingGroup GetDiminishingReturnsGroupForSpell(SpellEntry const* spellproto
                 return DIMINISHING_LIMITONLY;
             break;
         }
+        case SPELLFAMILY_SHAMAN:
+        {
+            // Frost Shock - limit duration in PvP
+            if (spellproto->SpellFamilyFlags & UI64LIT(0x00080000000))
+                return DIMINISHING_LIMITONLY;
+            break;
+        }
         default:
             break;
     }
diff --git a/src/game/SpellMgr.h b/src/game/SpellMgr.h
index 4e5d6b1..58b962b 100644
--- a/src/game/SpellMgr.h
+++ b/src/game/SpellMgr.h
@@ -64,7 +64,7 @@ enum SpellSpecific
     SPELL_POSITIVE_SHOUT    = 12,
     SPELL_JUDGEMENT         = 13,
     SPELL_BATTLE_ELIXIR     = 14,
-    SPELL_GUARDIAN_ELIXIR   = 15,
+    SPELL_ZANZA_ELIXIR      = 15,
     SPELL_FLASK_ELIXIR      = 16,
     //SPELL_PRESENCE          = 17,                         // used in 3.x
     //SPELL_HAND              = 18,                         // used in 3.x
@@ -361,7 +361,7 @@ inline bool IsDispelSpell(SpellEntry const *spellInfo)
 
 inline bool isSpellBreakStealth(SpellEntry const* spellInfo)
 {
-    return !(spellInfo->AttributesEx & SPELL_ATTR_EX_NOT_BREAK_STEALTH);
+    return ((spellInfo->AttributesEx & SPELL_ATTR_EX_STEALTH) ? false : !(spellInfo->AttributesEx & SPELL_ATTR_EX_NOT_BREAK_STEALTH));
 }
 
 inline bool IsAutoRepeatRangedSpell(SpellEntry const* spellInfo)
@@ -573,6 +573,7 @@ struct SpellBonusEntry
 typedef UNORDERED_MAP<uint32, SpellProcEventEntry> SpellProcEventMap;
 typedef UNORDERED_MAP<uint32, SpellBonusEntry>     SpellBonusMap;
 
+#define ELIXIR_ZANZA_MASK     0x02
 #define ELIXIR_FLASK_MASK     0x03                          // 2 bit mask for batter compatibility with more recent client version, flaks must have both bits set
 #define ELIXIR_WELL_FED       0x10                          // Some foods have SPELLFAMILY_POTION
 
@@ -803,6 +804,8 @@ class SpellMgr
             // flasks must have all bits set from ELIXIR_FLASK_MASK
             if((mask & ELIXIR_FLASK_MASK)==ELIXIR_FLASK_MASK)
                 return SPELL_FLASK_ELIXIR;
+            else if (mask & ELIXIR_ZANZA_MASK)
+                return SPELL_ZANZA_ELIXIR;
             else if(mask & ELIXIR_WELL_FED)
                 return SPELL_WELL_FED;
             else
-- 
1.7.6.msysgit.0

